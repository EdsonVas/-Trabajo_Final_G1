#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Estructura para los requerimientos de consultoría
typedef struct {
    int id;
    char cliente[50];
    char descripcion[200];
    char estado[20]; // "Pendiente", "En Progreso", "Finalizado"
    char consultorAsignado[50];
} Requerimiento;

// Declaración de funciones
void registrarRequerimientoConsultoria();
void listarRequerimientosConsultoria();
void asignarConsultor();
void actualizarEstadoConsultoria();
void generarReporteConsultoria();
void salirModuloConsultoria();

// Variables globales
Requerimiento requerimientos[100]; // Hasta 100 requerimientos de consultoría
int totalRequerimientos = 0;

// Función principal
int main() {
    int opcion;

    while (1) {
        // Menú principal del módulo
        printf("\n--- Módulo de Consultoría ---\n");
        printf("1. Registrar Requerimiento\n");
        printf("2. Listar Requerimientos\n");
        printf("3. Asignar Consultor\n");
        printf("4. Actualizar Estado\n");
        printf("5. Generar Reporte\n");
        printf("6. Salir del Módulo\n");
        printf("Seleccione una opción: ");
        scanf("%d", &opcion);

        // Opciones del menú
        switch (opcion) {
            case 1:
                registrarRequerimientoConsultoria();
                break;
            case 2:
                listarRequerimientosConsultoria();
                break;
            case 3:
                asignarConsultor();
                break;
            case 4:
                actualizarEstadoConsultoria();
                break;
            case 5:
                generarReporteConsultoria();
                break;
            case 6:
                salirModuloConsultoria();
                break;
            default:
                printf("Opción no válida. Intente nuevamente.\n");
        }
    }

    return 0;
}

// Función para registrar un requerimiento de consultoría
void registrarRequerimientoConsultoria() {
    Requerimiento nuevoRequerimiento;

    printf("\n--- Registrar Requerimiento de Consultoría ---\n");
    nuevoRequerimiento.id = totalRequerimientos + 1;
    printf("Nombre del cliente: ");
    scanf(" %[^\n]s", nuevoRequerimiento.cliente);
    printf("Descripción del requerimiento: ");
    scanf(" %[^\n]s", nuevoRequerimiento.descripcion);
    strcpy(nuevoRequerimiento.estado, "Pendiente");
    strcpy(nuevoRequerimiento.consultorAsignado, "No asignado");

    // Guardar el requerimiento
    requerimientos[totalRequerimientos] = nuevoRequerimiento;
    totalRequerimientos++;

    printf("Requerimiento registrado exitosamente con ID: %d\n", nuevoRequerimiento.id);
}

// Función para listar los requerimientos de consultoría
void listarRequerimientosConsultoria() {
    printf("\n--- Lista de Requerimientos de Consultoría ---\n");
    for (int i = 0; i < totalRequerimientos; i++) {
        printf("ID: %d\n", requerimientos[i].id);
        printf("Cliente: %s\n", requerimientos[i].cliente);
        printf("Descripción: %s\n", requerimientos[i].descripcion);
        printf("Estado: %s\n", requerimientos[i].estado);
        printf("Consultor Asignado: %s\n", requerimientos[i].consultorAsignado);
        printf("------------------------\n");
    }
}

// Función para asignar un consultor a un requerimiento
void asignarConsultor() {
    int id;
    char consultor[50];

    printf("\n--- Asignar Consultor ---\n");
    printf("Ingrese el ID del requerimiento: ");
    scanf("%d", &id);

    // Buscar el requerimiento por ID
    int encontrado = 0;
    for (int i = 0; i < totalRequerimientos; i++) {
        if (requerimientos[i].id == id) {
            encontrado = 1;
            printf("Ingrese el nombre del consultor: ");
            scanf(" %[^\n]s", consultor);
            strcpy(requerimientos[i].consultorAsignado, consultor);
            printf("Consultor asignado exitosamente.\n");
            break;
        }
    }

    if (!encontrado) {
        printf("Requerimiento con ID %d no encontrado.\n", id);
    }
}

// Función para actualizar el estado de un requerimiento
void actualizarEstadoConsultoria() {
    int id;
    char nuevoEstado[20];

    printf("\n--- Actualizar Estado de Requerimiento ---\n");
    printf("Ingrese el ID del requerimiento: ");
    scanf("%d", &id);

    // Buscar el requerimiento por ID
    int encontrado = 0;
    for (int i = 0; i < totalRequerimientos; i++) {
        if (requerimientos[i].id == id) {
            encontrado = 1;
            printf("Estado actual: %s\n", requerimientos[i].estado);
            printf("Ingrese el nuevo estado (Pendiente, En Progreso, Finalizado): ");
            scanf("%s", nuevoEstado);
            strcpy(requerimientos[i].estado, nuevoEstado);
            printf("Estado actualizado exitosamente.\n");
            break;
        }
    }

    if (!encontrado) {
        printf("Requerimiento con ID %d no encontrado.\n", id);
    }
}

// Función para generar un reporte
void generarReporteConsultoria() {
    int pendientes = 0, enProgreso = 0, finalizados = 0;

    printf("\n--- Generar Reporte de Consultoría ---\n");
    for (int i = 0; i < totalRequerimientos; i++) {
        if (strcmp(requerimientos[i].estado, "Pendiente") == 0) {
            pendientes++;
        } else if (strcmp(requerimientos[i].estado, "En Progreso") == 0) {
            enProgreso++;
        } else if (strcmp(requerimientos[i].estado, "Finalizado") == 0) {
            finalizados++;
        }
    }

    printf("Total de requerimientos: %d\n", totalRequerimientos);
    printf("Pendientes: %d\n", pendientes);
    printf("En Progreso: %d\n", enProgreso);
    printf("Finalizados: %d\n", finalizados);
}

// Función para salir del módulo
void salirModuloConsultoria() {
    printf("\nSaliendo del módulo de consultoría. ¡Hasta luego!\n");
    exit(0);
}
